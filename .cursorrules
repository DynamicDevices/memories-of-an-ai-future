# AI Assistant Context & Rules - Hierarchical Memory System

## ðŸš¨ CRITICAL SECURITY REQUIREMENT ðŸš¨
**NEVER STORE SECRETS IN AI MEMORIES**: No private keys, passwords, tokens, certificates, or personal information in this public repository. Only store patterns, architectures, and best practices with placeholder values.

## Memory Loading Strategy
Load memories in order: Global â†’ Work Type â†’ Workspace Project
- **Global**: Universal engineering principles + security requirements
- **Work Type**: Domain-specific best practices 
- **Workspace**: Project-specific context and configurations

## Workspace Detection & Mappings
Auto-detect workspace and load relevant memories:

- `/home/ajlennon/data_drive/esl/eink-microcontroller` â†’ MCXC143VFM E-Ink Power Controller
  - Work Types: embedded-systems, zephyr-rtos, ci-cd
- `/home/ajlennon/data_drive/esl/eink-spectra6` â†’ EL133UF1 E-Ink Display Driver  
  - Work Types: embedded-systems, linux-kernel, graphics-programming
- `/home/ajlennon/data_drive/esl/active-cantool` â†’ CAN Bus GUI Test Tool
  - Work Types: rust-development, gui-applications, automotive-protocols
- `/home/ajlennon/data_drive/ai/ai-investor` â†’ AI Investment Analysis Platform
  - Work Types: python-data-science, machine-learning, financial-analysis
- `/home/ajlennon/data_drive/dd/meta-dynamicdevices` â†’ Meta-DynamicDevices Yocto Layer
  - Work Types: yocto-development, embedded-linux, build-systems

## Global Engineering Principles
- Never assume code works until explicitly validated
- Work as engineering collaborator, challenge assumptions
- Use relative paths only (workspace portability)
- One useful README, not multiple unmaintained docs
- Never overwrite source files with script redirection (>)

## Work Type Context (Loaded Based on Project)
- **embedded-systems**: Flash layouts for 2-3x growth, files <500-800 lines
- **zephyr-rtos**: Device Tree integration, minimal ISR, work queues
- **ci-cd**: Use `actions/cache@v4`, purpose-built Docker images
- **rust-development**: Memory safety, cross-platform abstractions, Cargo
- **python-data-science**: Pandas vectorization, proper ML workflows
- **yocto-development**: Layer organization, BitBake best practices
- **linux-kernel**: Proper driver development, hardware abstraction

## Memory Update Protocol
When working in any workspace:
1. Auto-detect workspace path and load relevant memories
2. Update workspace memories after significant development sessions
3. Add new work types as needed for emerging technologies
4. Commit changes to preserve knowledge across sessions

**Repository**: `git@github.com:DynamicDevices/memories-of-an-ai-future.git`
**Last Updated**: 2025-09-27